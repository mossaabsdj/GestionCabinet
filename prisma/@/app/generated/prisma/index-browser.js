
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  age: 'age',
  dateDeNaissance: 'dateDeNaissance',
  telephone: 'telephone',
  adresse: 'adresse',
  antecedents: 'antecedents',
  poidsDeNaissance: 'poidsDeNaissance',
  groupeSanguin: 'groupeSanguin',
  createdAt: 'createdAt'
};

exports.Prisma.ConsultationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  note: 'note',
  taille: 'taille',
  poids: 'poids',
  tensionSystolique: 'tensionSystolique',
  tensionDiastolique: 'tensionDiastolique',
  temperature: 'temperature',
  frequenceCardiaque: 'frequenceCardiaque',
  frequenceRespiratoire: 'frequenceRespiratoire',
  saturationOxygene: 'saturationOxygene',
  glycemie: 'glycemie',
  createdAt: 'createdAt',
  developpementPsychomoteur: 'developpementPsychomoteur'
};

exports.Prisma.RadioScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  patientId: 'patientId',
  description: 'description',
  fichier: 'fichier',
  createdAt: 'createdAt'
};

exports.Prisma.BilanFileScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  patientId: 'patientId',
  type: 'type',
  description: 'description',
  fichier: 'fichier',
  createdAt: 'createdAt'
};

exports.Prisma.OrdonnanceScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  consultationId: 'consultationId',
  createdAt: 'createdAt'
};

exports.Prisma.OrdonnanceItemScalarFieldEnum = {
  id: 'id',
  ordonnanceId: 'ordonnanceId',
  medicamentId: 'medicamentId',
  dosage: 'dosage',
  frequence: 'frequence',
  duree: 'duree',
  quantite: 'quantite'
};

exports.Prisma.MedicamentScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  createdAt: 'createdAt'
};

exports.Prisma.BilanScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  createdAt: 'createdAt'
};

exports.Prisma.BilanRecipScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  consultationId: 'consultationId',
  createdAt: 'createdAt'
};

exports.Prisma.BilanItemScalarFieldEnum = {
  id: 'id',
  bilanRecipId: 'bilanRecipId',
  bilanId: 'bilanId',
  resultat: 'resultat',
  remarque: 'remarque'
};

exports.Prisma.BilanTypeScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.BilanTypeItemScalarFieldEnum = {
  id: 'id',
  bilanTypeId: 'bilanTypeId',
  bilanId: 'bilanId',
  remarque: 'remarque'
};

exports.Prisma.RecetteTypeScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.RecetteTypeItemScalarFieldEnum = {
  id: 'id',
  recetteId: 'recetteId',
  medicamentId: 'medicamentId',
  dosage: 'dosage',
  frequence: 'frequence',
  duree: 'duree',
  quantite: 'quantite'
};

exports.Prisma.PaiementScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  montant: 'montant',
  date: 'date'
};

exports.Prisma.VaccineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.VaccinationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  vaccineId: 'vaccineId',
  dateGiven: 'dateGiven',
  doseNumber: 'doseNumber',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.PatientOrderByRelevanceFieldEnum = {
  nom: 'nom',
  telephone: 'telephone',
  adresse: 'adresse',
  antecedents: 'antecedents'
};

exports.Prisma.ConsultationOrderByRelevanceFieldEnum = {
  note: 'note',
  developpementPsychomoteur: 'developpementPsychomoteur'
};

exports.Prisma.RadioOrderByRelevanceFieldEnum = {
  description: 'description',
  fichier: 'fichier'
};

exports.Prisma.BilanFileOrderByRelevanceFieldEnum = {
  type: 'type',
  description: 'description',
  fichier: 'fichier'
};

exports.Prisma.OrdonnanceItemOrderByRelevanceFieldEnum = {
  dosage: 'dosage',
  frequence: 'frequence',
  duree: 'duree'
};

exports.Prisma.MedicamentOrderByRelevanceFieldEnum = {
  nom: 'nom'
};

exports.Prisma.BilanOrderByRelevanceFieldEnum = {
  nom: 'nom'
};

exports.Prisma.BilanItemOrderByRelevanceFieldEnum = {
  resultat: 'resultat',
  remarque: 'remarque'
};

exports.Prisma.BilanTypeOrderByRelevanceFieldEnum = {
  nom: 'nom'
};

exports.Prisma.BilanTypeItemOrderByRelevanceFieldEnum = {
  remarque: 'remarque'
};

exports.Prisma.RecetteTypeOrderByRelevanceFieldEnum = {
  nom: 'nom'
};

exports.Prisma.RecetteTypeItemOrderByRelevanceFieldEnum = {
  dosage: 'dosage',
  frequence: 'frequence',
  duree: 'duree'
};

exports.Prisma.VaccineOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.VaccinationOrderByRelevanceFieldEnum = {
  notes: 'notes'
};
exports.GroupeSanguin = exports.$Enums.GroupeSanguin = {
  A_POS: 'A_POS',
  A_NEG: 'A_NEG',
  B_POS: 'B_POS',
  B_NEG: 'B_NEG',
  AB_POS: 'AB_POS',
  AB_NEG: 'AB_NEG',
  O_POS: 'O_POS',
  O_NEG: 'O_NEG'
};

exports.Prisma.ModelName = {
  Patient: 'Patient',
  Consultation: 'Consultation',
  Radio: 'Radio',
  BilanFile: 'BilanFile',
  Ordonnance: 'Ordonnance',
  OrdonnanceItem: 'OrdonnanceItem',
  Medicament: 'Medicament',
  Bilan: 'Bilan',
  BilanRecip: 'BilanRecip',
  BilanItem: 'BilanItem',
  BilanType: 'BilanType',
  BilanTypeItem: 'BilanTypeItem',
  RecetteType: 'RecetteType',
  RecetteTypeItem: 'RecetteTypeItem',
  Paiement: 'Paiement',
  Vaccine: 'Vaccine',
  Vaccination: 'Vaccination'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
